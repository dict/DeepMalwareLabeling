import os
import sys
import json
import asyncio
import tornado
import tornado.ioloop
import tornado.httpserver
import pickle as pkl
from http import HTTPStatus
from tornado.platform.asyncio import AsyncIOMainLoop
from tornado.httpclient import AsyncHTTPClient
from tornado import web, escape

import ast

import core

from backend_config import config
from tornado_file import TornadoFile
from knn.knn import KNN
from multitag.multitag import Predictor
from util import *


class UploadHandler(web.RequestHandler):
    def initialize(self, context):
        self.app_context = context

    def set_default_headers(self):
        self.set_header("Access-Control-Allow-Origin", "*")
        self.set_header("Access-Control-Allow-Headers", "x-requested-with")
        self.set_header('Access-Control-Allow-Methods', 'POST, OPTIONS')

    def options(self):
        self.set_status(204)
        self.finish()

    def post(self):
        sample = TornadoFile.create_from_request(self.request)
        tags = escape.json_decode(self.request.body_arguments['tags'][0])
        add_tag = strl_to_intl(tags['add'])
        sub_tag = strl_to_intl(tags['sub'])

        report = core.query(self.app_context, sample, add_tag, sub_tag)
        report = ast.literal_eval(str(report))
        self.set_status(HTTPStatus.OK)
        self.set_header('Content-Type', 'application/json')
        self.write(json.dumps(report))
        self.flush()
        self.finish()


class App(object):
    class Engines(object):
        def __init__(self):
            self.multitag = Predictor()
            self.knn = KNN()

    def __init__(self, loop):
        self._set_context()
        self.server_app = web.Application(
            handlers=[
                (r"/", UploadHandler, dict(context=self)),
            ]
        )

    def _set_context(self):
        self.app = self.Engines()
        with open(config['bottleneck'], "rb") as f:
            self.bot_list = pkl.load(f, encoding='latin1')


def main():
    AsyncIOMainLoop().install()
    loop = asyncio.get_event_loop()
    app = App(loop)
    server = tornado.httpserver.HTTPServer(app.server_app, max_body_size=config['max_upload_size'], max_buffer_size=config['max_upload_size'])
    server.bind(config['server_port'])
    server.start()

    loop.run_forever()


if __name__ == '__main__':
    main()
