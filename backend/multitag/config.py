import os


def check_exist_and_mkdir(path):
    if not os.path.exists(path):
        print('make dir', path)
        os.makedirs(path)


class Config(object):

    def __init__(self):


        # paths
        self.base_dir = '/malware/multitag'
        self.model_dir = os.path.join(self.base_dir, 'model_dir/') # checkpoint
        self.data_dir = os.path.join(self.base_dir, 'datasets/')
        self.report_dir = os.path.join(self.base_dir ,'reports/')
        self.front_dir = os.path.join('/front/rsc/')

        check_exist_and_mkdir(self.model_dir)
        check_exist_and_mkdir(self.data_dir)
        check_exist_and_mkdir(self.report_dir)
        check_exist_and_mkdir(self.front_dir)

        self.train_metadata_path = os.path.join(self.data_dir, 'train_metadata.csv')
        self.valid_metadata_path = os.path.join(self.data_dir, 'valid_metadata.csv')

        self.labeldict_path = os.path.join(self.report_dir, 'labeldict.pkl')
        self.indexdict_path = os.path.join(self.report_dir, 'indexdict.pkl')
        self.tag_list_path = os.path.join(self.report_dir, 'tag_list.json')
        self.bottlenecks_train_path = os.path.join(self.report_dir, 'bottlenecks_train.pkl') # knn, obtain pca object
        self.bottlenecks_valid_path = os.path.join(self.report_dir, 'bottlenecks_valid.pkl') # obtain pca object
        self.sha_train_path = os.path.join(self.report_dir, 'sha_train.pkl') # knn

        self.centers_path = os.path.join(self.report_dir, 'centers.pkl') # tag vectors
        self.pca_object_path = os.path.join(self.report_dir, 'pca_object.pkl') # knn
        self.pca3d_samples_path = os.path.join(self.front_dir, 'pca3d_samples.json') # pre-drawed samlples
        self.after_pca_path = os.path.join(self.front_dir, 'after_pca.json') # draw
        self.tag_list_path = os.path.join(self.front_dir, 'tag_list.json')	


        # model configs
        self.params = dict()
        self.params['hidden_units'] = [300, 30]
        self.params['filter_num'] = [32, 32, 32, 32, 32]
        self.params['learning_rate'] = 0.001
        self.params['centerloss_coef'] = 0.0001
        self.params['batch_norm'] = True
        self.params['reg_coef'] = 0.0
        self.params['model_dir'] = self.model_dir


        # train configs
        self.batch_size = 60
        self.shuffle_buffer = 180
        self.num_epochs = 20
