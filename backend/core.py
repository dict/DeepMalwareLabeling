import json
import os
import sys

from backend_config import config
from util import *


class QueryResult(object):
    def __init__(self, vector, score=[]):
        self.vector = vector
        self.score = score

    @staticmethod
    def merge(rl):
        vector = sum_list([r.vector for r in rl])
        score = []
        for r in rl:
            score = score + r.score
        return QueryResult(vector, score)


class Searcher(object):
    def __init__(self, searcher):
        self.searcher = searcher

    def search(self, vector):
        return self.searcher.inference(vector)


class Query(object):
    def __init__(self, queries):
        self.queries = queries

    def query(self):
        results = [q.query() for q in self.queries]
        return QueryResult.merge(results)


class TagQuery(object):
    def __init__(self, context, tag, negate=False):
        self.tag = tag
        self.tag_vec_list = context.bot_list
        self.negate = negate

    def query(self):
        if self.negate:
            return QueryResult(negate_list(self.tag_vec_list[self.tag]))
        return QueryResult(list(self.tag_vec_list[self.tag]))


class BlobQuery(object):
    def __init__(self, context, blob):
        self.blob = blob
        self.predictor = context.app.multitag

    def query(self):
        result = self.predictor.predict(self.blob)
        return QueryResult(list(result['bottleneck']), list(result['sigmoids']))


class QueryBuilder(object):
    def __init__(self, context):
        self.blobs = []
        self.tags = []
        self.context = context

    def add_blob(self, blob):
        self.blobs.append(BlobQuery(self.context, blob))

    def add_adds(self, tags):
        self.tags = self.tags + [TagQuery(self.context, tag) for tag in tags]

    def add_subs(self, tags):
        self.tags = self.tags + [TagQuery(self.context, tag, negate=True) for tag in tags]

    def build(self):
        return Query(self.blobs + self.tags)


class ResultBuilder(object):
    def __init__(self, context, query_result):
        self.searcher = Searcher(context.app.knn)
        self.score = query_result.score
        self.vector = query_result.vector

    def build(self):
        search_result = self.searcher.search(self.vector)
        result = {"knn": search_result}
        if len(self.score):
            result["multitag"] = {"score": self.score, "vector": self.vector}
        return result


def query(context, sample, add_tags, sub_tags):
    query_builder = QueryBuilder(context)
    if sample:
        query_builder.add_blob(sample.blob)
    query_builder.add_adds(add_tags)
    query_builder.add_subs(sub_tags)
    result_builder = ResultBuilder(context, query_builder.build().query())
    return result_builder.build()
