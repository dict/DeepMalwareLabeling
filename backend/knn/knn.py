from __future__ import print_function
import numpy as np
import sys
import os
import pickle
import nmslib
import asyncio

from .knn_config import config

os.environ['LD_LIBRARY_PATH'] += ':/usr/local/lib'


class KNN(object):
    def __init__(self):
        with open(config['bot_path'], "rb") as f:
            bot_data = pickle.load(f, encoding="latin1")
        with open(config['sha_path'], "rb") as f:
            sha_data = pickle.load(f, encoding="latin1")

        self.sha_list = []
        self.bot_list = []
        for idx in range(len(bot_data)):
            self.bot_list.append(bot_data[idx])
            self.sha_list.append(sha_data[idx].split('/')[-1])

        self.index = nmslib.init(method='hnsw', space='l2')
        self.index.addDataPointBatch(self.bot_list)
        self.index.createIndex({'post': 2}, print_progress=True)

        with open(config['pca_mat_path'], "rb") as f:
            self.pca_mat = pickle.load(f, encoding="latin1")

    def inference(self, bottleneck, item_num=10):
        nei = self.index.knnQuery(bottleneck, k=item_num)
        answer = []

        for idx in range(len(nei[0])):
            d = {}
            d['id'] = self.sha_list[int(nei[0][idx])]
            d['distance'] = str(nei[1][idx])
            answer.append(d)

        coord = self.pca_mat.transform([bottleneck])
        report = {'coord': coord[0].tolist(), 'samples': answer}
        return report
