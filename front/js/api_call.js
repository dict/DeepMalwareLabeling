var app = {
    reports: null,
    keys: null,
    baseUrl: "",
    apiKey: "",
    fileType: "",
    fileName: "",

    scanId: "",
    init: function () {
        this.baseUrl = "http://localhost:52221/";

        $.getJSON("http://localhost:8080/rsc/after_pca.json", function(json) {
            app.afterPca = json;
        });
        $.getJSON("http://localhost:8080/rsc/pca3d_samples.json", function(json) {
            app.tagVectors = json;
        });
        $.getJSON("http://localhost:8080/rsc/sha_multitag.json", function(json) {
            app.shaTags = json;
        });
        $.getJSON("http://localhost:8080/rsc/tag_list.json", function(json) {
            app.tagList = json;
            let plus = $('#plusTag');
            let minus = $("#minusTag");

            for(var i=0; i<Object.keys(json).length;i++) {
                plus.append($('<option></option>').attr('value', i).text(json[i]));
                minus.append($('<option></option>').attr('value', i).text(json[i]));
            }
        });

        $('#plusTag').select2();
        $('#minusTag').select2();
        $("#minusTag").prop("disabled", true);

        this.bindEvents();
        this.resetDropdown();
        this.render();
    },
    bindEvents: function () {
        $("#sendFile").click(function () {
            if($("#fileClear")[0].disabled) {
                app.analyse($("#inputFile").prop("files")[0], $("#plusTag").val(), []);
            } else {
                app.analyse($("#inputFile").prop("files")[0], $("#plusTag").val(), $("#minusTag").val());
            }
        });
        $("#inputFile").blur(function () {
            $("#minusTag").prop("disabled", true);
        });
        $("#inputFile").change(function () {
            if ($('#inputFile').get(0).files.length === 0) {
                $("#minusTag").prop("disabled", true);
            } else {
                $("#minusTag").prop("disabled", false);
            }
        });
        $("#fileClear").click(function () {
            $("#inputFile").val("");
            $("#uploadFileName").val("");
            $("#minusTag").prop("disabled", true);
        });
    },
    render: function () {
        if (this.reports) {
            this.resetDropdown();
            this.renderDropdown();
        }
    },
    renderDropdown: function () {
        var engineNames = {
            "multitag": "Classification Engine",
            "knn": "Search Engine"
        };
        var list = $("#dropdownList");
        for (var i = 0; i < this.keys.length; i++) {
            (function (key, report) {
                list.append(
                    $("<li>").append(
                        $("<a>").text(engineNames[key]).attr("href", "#").on('click', function () {
                            app.clickDropdown(app.keys[$(this).closest('li').index()]);
                        })
                    )
                )
            })(this.keys[i], this.reports[this.keys[i]]);
        }
    },
    clickDropdown: function (selectedName) {
        var listName = "";
        if(selectedName.includes('knn')) {
            listName = "samples";
        } else {
            listName = "score";
        }
        var list = this.reports[selectedName][listName]
        if(selectedName.includes('knn')) {
            list = list.map(function(value) {
                return [value['id'], value['distance']];
            });
        } else {
            list = list.map(function(value, index) {
                return [app.tagList[index], value];
            });
            list.sort(function(a,b) {
                return a[1] < b[1] ? 1: (a[1]>b[1] ? -1: 0);
            });
        }
        this.renderSummary(list);
        this.renderResult(list);
        this.renderPlot(list, selectedName);
    },
    renderSummary: function (data) {
        topList = data.slice(0,10);
        $("#json-summary").text(JSON.stringify(topList, null, 2));
    },
    renderResult: function (data) {
        $("#json-report").text(JSON.stringify(data, null, 2));
    },
    renderPlot: function (data, method="none") {
        var settings = this.setPlot(data, method);
        if(method.includes('knn')) {
            $("#knnplot").show();
            var knnsettings = this.setKNNPlot(data);
            Plotly.newPlot('knnplot', knnsettings[0], knnsettings[1]);
        } else {
            Plotly.purge('knnplot');
        }
        Plotly.newPlot('visualise', settings[0], settings[1]);

        $("#collapse-visualise").collapse({
            toggle: true
        });
    },
    resetDropdown: function () {
        $("#dropdownList").empty();
        $("#knnplot").hide();
    },
    setPlot: function (data, method) {
        var tags = [];
        var values = [];
        var maxRow = Math.min(data.length, 10);
        for (var i = 1; i<=maxRow; i++) {
            if(method.includes('knn')) {
                tags.push(data[maxRow-i][0].substring(0,10) + "...");
            } else {
                tags.push(data[maxRow-i][0]);
            }
            values.push(data[maxRow-i][1]);
        }
        var plotData = [{
            type: 'bar',
            x: values,
            y: tags,
            orientation: 'h'
        }];
        var layout = {
            height:600,
            width:1000,
            autosize: false,
            margin: {
                l:100,
                r:100,
                pad:5
            }
        }
        return [plotData, layout];
    },
    setKNNPlot: function (data) {
        var plotData = [];
        var preplotData = jQuery.extend(true, [], this.tagVectors);
        var targetData = this.reports['knn']['coord'];
        var hashed_pca = this.afterPca;

        for(var i=0;i<preplotData.length;i++) {
            for(var j=0;j<preplotData[i]['x'].length;j++) {
                preplotData[i]['legendgroup'] = 'train';
                preplotData[i]['visible'] = true;//'legendonly';
                preplotData[i]['type'] = 'scatter3d';
                preplotData[i]['hoverinfo'] = 'x+y+z+text';
            }
        }

        adds = $("#plusTag").val();
        subs = $("#minusTag").val();

        tagInfo = "";
        if(adds.length+subs.length) {
            if(adds.length) {
                addedList = [];
                for (var i=0;i<adds.length;i++) {
                    addedList.push(this.tagList[adds[i]]);
                }
                addInfo = "+" + addedList.join() + "\n";
                tagInfo = tagInfo + addInfo;
            }

            if(subs.length) {
                subbedList = [];
                for (var i=0;i<subs.length;i++) {
                    subbedList.push(this.tagList[subs[i]]);
                }
                subInfo = "-" + subbedList.join();
                tagInfo = tagInfo + subInfo;
            }
        }

        var target = {
            mode: 'markers',
            marker: {
                size: 7,
                color: 'rgb(85,85,255)',
            },
            x:[targetData[0]],
            y:[targetData[1]],
            z:[targetData[2]],
            type: 'scatter3d',
            name: this.fileName+'\n'+tagInfo,
        };

        plotData.push(target);

        var maxRow = Math.min(data.length, 10);
        for (var i = 1; i<=maxRow; i++) {
            var tops = {
                mode: 'markers',
                marker: {
                    size: 4,
                    color: 'rgb(255,85,85)',
                },
                x:[hashed_pca[data[maxRow-i][0]]['x']],
                y:[hashed_pca[data[maxRow-i][0]]['y']],
                z:[hashed_pca[data[maxRow-i][0]]['z']],
                type: 'scatter3d',
                name: data[maxRow-i][0].substring(0,10) + "...",
                text: this.shaTags[data[maxRow-i][0]],
                hoverinfo: "x+y+z+text"
            };
            plotData.push(tops);
        }

        var margin = 5.0;

        var layout = {
            height:600,
            width:1100,
            autosize: false,
            margin: {
                l:100,
                r:100,
                pad:5
            },
            scene: {
                xaxis: {
                    range: [targetData[0] - margin, targetData[0] + margin], autorange: false
                },
                yaxis: {
                    range: [targetData[1] - margin, targetData[1] + margin], autorange: false
                },
                zaxis: {
                    range: [targetData[2] - margin, targetData[2] + margin], autorange: false
                }
           }
        };
        plotData = plotData.concat(preplotData);
        return [plotData, layout];
    },
    analyse: function (file, plus, minus) {
        var requestUrl = this.baseUrl;
        var formData = new FormData();
        formData.append("file", file);
        this.fileName = $("#uploadFileName")[0].value;

        var analysingData = {
            'add': plus,
            'sub': minus
        };
        formData.append("tags", JSON.stringify(analysingData));

        $.ajax({
            url: requestUrl,
            type: "POST",
            data: formData,
            processData: false,
            contentType: false,
            success: function(data) {
                app.handleResults(data);
            }
        });
    },
    handleResults: function (data) {
        this.reports = data;
        this.keys = Object.keys(this.reports);

        this.render();
        app.clickDropdown('knn');
    }
}

app.init();
